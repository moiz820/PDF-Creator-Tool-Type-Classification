import os
import numpy as np
from collections import Counter
import matplotlib.pyplot as plt
import seaborn as sns

def compute_byte_histogram(file_path):
    with open(file_path, 'rb') as file:
        byte_content = file.read()
        byte_counter = Counter(byte_content)
        histogram = [byte_counter.get(i, 0) for i in range(256)]
        total_bytes = sum(histogram)
        normalized_histogram = np.array(histogram) / total_bytes if total_bytes > 0 else np.zeros(256)
        return normalized_histogram
def collect_histograms(directory_path):
    tool_histograms = {}
    for root, dirs, files in os.walk(directory_path):
        tool_name = os.path.basename(root)
        histograms = []
        for file in files:
            file_path = os.path.join(root, file)
            histogram = compute_byte_histogram(file_path)
            histograms.append(histogram)
        tool_histograms[tool_name] = histograms
    return tool_histograms


def plot_histograms(tool_histograms):
    plt.figure(figsize=(14, 7))
    for tool_name, histograms in tool_histograms.items():
        # Average histograms for smoother visualization
        mean_histogram = np.mean(histograms, axis=0)
        sns.lineplot(x=range(256), y=mean_histogram, label=tool_name)
    plt.title('Average Byte Histograms by PDF Tool')
    plt.xlabel('Byte Value')
    plt.ylabel('Normalized Frequency')
    plt.legend(title='PDF Tool')
    plt.grid(True)
    plt.show()
# Specify the directory containing folders of PDFs sorted by tool
data_directory = '/Users/moizzia/Downloads/Tools/ACOMP exe'

# Collect histograms
tool_histograms = collect_histograms(data_directory)

# Visualize histograms
plot_histograms(tool_histograms)
########################################################################################################################
from collections import Counter
import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
def compute_byte_histogram(file_path):
    with open(file_path, 'rb') as file:
        byte_content = file.read()
        byte_counter = Counter(byte_content)
        histogram = [byte_counter.get(i, 0) for i in range(256)]
        total_bytes = sum(histogram)
        normalized_histogram = np.array(histogram) / total_bytes if total_bytes > 0 else np.zeros(256)
        return normalized_histogram
def collect_histograms_from_directories(directories):
    tool_histograms = {}
    for directory in directories:
        tool_name = os.path.basename(directory)
        histograms = []
        for filename in os.listdir(directory):
            file_path = os.path.join(directory, filename)
            if os.path.isfile(file_path):
                try:
                    histogram = compute_byte_histogram(file_path)
                    histograms.append(histogram)
                except Exception as e:
                    print(f"Failed to process {file_path}: {e}")
        if histograms:
            tool_histograms[tool_name] = histograms
    return tool_histograms
def plot_histograms(tool_histograms):
    plt.figure(figsize=(14, 7))
    for tool_name, histograms in tool_histograms.items():
        # Average histograms for smoother visualization
        mean_histogram = np.mean(histograms, axis=0)
        sns.lineplot(x=range(256), y=mean_histogram, label=tool_name)
    plt.title('Average Byte Histograms by PDF Tool')
    plt.xlabel('Byte Value')
    plt.ylabel('Normalized Frequency')
    plt.legend(title='PDF Tool')
    plt.grid(True)
    plt.show()
# List of directories containing PDFs generated by different tools
directories = [
    '/Users/moizz/Downloads/Tools/ACOMP exe',
    '/Users/moizz/Downloads/Tools/PScript5.dll',
    '/Users/moizz/Downloads/Tools/MS_WORD',
    '/Users/moizz/Downloads/Tools/Acrobat PDFMaker for Word',
    '/Users/moizz/Downloads/Tools/Tex',
    '/Users/moizz/Downloads/Tools/Adobe_InDesign',
    '/Users/moizz/Downloads/Tools/Writer',
    '/Users/moizz/Downloads/Tools/Apple Pages'
    
]

# Collect byte histograms from each directory
tool_histograms = collect_histograms_from_directories(directories)

# Plot histograms on a single graph for comparison
plot_histograms(tool_histograms)
